% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/record_CAGED.R
\name{record_CAGEG}
\alias{record_CAGEG}
\title{Gravar e atualizar bancos de dados com os dados do CAGED}
\usage{
record_CAGEG(
  last.m = "01",
  last.y = "2007",
  dir.SQLite = "./",
  name.SQLite = "DB.sqlite",
  ...
)
}
\arguments{
\item{last.m, last.y}{mês e ano para formar a data inicial, ex.: "12/2019".}

\item{dir.SQLite}{diretório onde deve ser criado o Banco de Dados (BD), no caso
de existir o banco, diretório onde está o banco de dados SQLite.}

\item{name.SQLite}{nome do BD, por padrão "BD.sqlite".}

\item{...}{argumentos passado para função \code{un7z}, ex.: \code{path7zip}.}
}
\value{
Se o BD ainda não foi criado essa função criará o banco de dados e 
adicionará todos os dados do CAGED disponível até a data atual. Por padrão,
a tabela CAGED guardará apenas as colunas:

\item{admitidos }{
Admitidos/Desligados;
}
\item{comp_declarada }{
Competência Declarada;
}
\item{cod_cbo }{
CBO 2002 Ocupação
}
\item{cod_cnae }{
CNAE 2.0 Classe;
}
\item{porte_emprasa }{
Faixa Empr Início Jan;
}
\item{escolaridade }{
Grau Instrução;
}
\item{qtd_horas_contrat }{
Qtd Hora Contrat;
}
\item{idade }{
Idade;
}
\item{cor }{
Raça Cor;
}
\item{salario_mensal }{
Salário Mensal;
}
\item{saldo_mov }{
Saldo Mov;
}
\item{sexo }{
Sexo;
}
\item{tempo_emprego }{
Tempo Emprego;
}
\item{tipo_mov_desagregado }{
Tipo Mov Desagregado;
}
\item{cod_uf }{
UF;
}
\item{ind_trab_parcial }{
Ind Trab Parcial;
}
\item{ind_trab_intermitente }{
Ind Trab Intermitente.
} 

Se deseja acessar todas as variáveis use a função \code{read_CAGED}. Ademais
a função criará uma tabela repository_metadata_CAGED com metadados gerado pela
função \code{repository_metadata_CAGED} de mesmo nome.
}
\description{
Gravar e atualizar bancos de dados com os dados do CAGED
}
\examples{

db <- record_CAGEG("12", "2019", dir.SQLite = ":memory:")

# Tabelas:
DBI::dbListTables(db)

# Acessando o tabela CADED:
DBI::dbReadTable(db, "CAGED")

# Acessando a tabela repository_metadata_CAGED:
DBI::dbReadTable(db, "repository_metadata_CAGED")

# Desconectando:
DBI::dbDisconnect(db)

}
